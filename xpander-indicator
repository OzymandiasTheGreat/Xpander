#!/usr/bin/env python3

import time
import os
import sys
from subprocess import Popen
from pathlib import Path
import gi
gi.require_version('Gtk', '3.0')
if sys.platform.startswith('linux'):
	gi.require_version('AppIndicator3', '0.1')
	from gi.repository import Gtk, GLib, AppIndicator3
	INDICATOR = True
else:
	from gi.repository import Gtk, GLib, GdkPixbuf
	INDICATOR = False
from xpander.control import BaseClient, ClientType, MsgType, MSG
from xpander.fs import Settings
from xpander.gtk_dialogs import AboutDialog


NAME = 'xpander-indicator'
if getattr(sys, 'frozen', False):
	__file__ = sys.executable
	SERVICE_COMMAND = [str(Path(__file__).with_name('xpanderd.exe'))]
else:
	DAEMON = Path('xpanderd')
	if sys.platform.startswith('linux'):
		if DAEMON.exists():
			SERVICE_COMMAND = [str(DAEMON.resolve())]
		else:
			SERVICE_COMMAND = [str(DAEMON)]
	else:
		if DAEMON.exists():
			SERVICE_COMMAND = ['python3', str(DAEMON.resolve())]
		else:
			SERVICE_COMMAND = None
ROOT = Path(__file__).resolve().parent
if (ROOT / 'data/xpander.svg').exists():
	ICON_ACTIVE = str(ROOT / 'data/xpander-active.svg')
	ICON_PAUSED = str(ROOT / 'data/xpander-paused.svg')
	ICON_ACTIVE_LIGHT = str(ROOT / 'data/xpander-active-light.svg')
	ICON_PAUSED_LIGHT = str(ROOT / 'data/xpander-paused-light.svg')
else:
	ICON_ACTIVE = 'xpander-active'
	ICON_PAUSED = 'xpander-paused'
	ICON_ACTIVE_LIGHT = 'xpander-active-light'
	ICON_PAUSED_LIGHT = 'xpander-paused-light'

class IconClient(BaseClient):

	def __init__(self, icon, settings):

		super().__init__(NAME, (ClientType.CONTROLLER, NAME))
		self.icon = icon
		self.settings = settings

	def process_msg(self, msg):

		if msg.type is MsgType.STATUS:
			GLib.idle_add(self.icon.set_status, msg.data)
		elif msg.type is MsgType.PAUSE:
			GLib.idle_add(self.icon.toggle_icon, not msg.data)
		elif msg.type is MsgType.SETTINGS:
			self.settings.reload()
			GLib.idle_add(self.icon.reload_settings)
		super().process_msg(msg)
		if not msg.type:
			GLib.idle_add(self.icon.mainloop.quit)


class Indicator(object):

	def __init__(self, settings):

		self.settings = settings
		self.indicator = AppIndicator3.Indicator.new(
			'xpander-indicator',
			(ICON_ACTIVE_LIGHT
				if self.settings.getbool('light_theme') else ICON_ACTIVE),
			AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
		self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
		self.indicator.set_menu(self.build_menu())
		self.mainloop = GLib.MainLoop()
		self.status_set = False
		try:
			self.client = IconClient(self, settings)
		except ConnectionRefusedError:
			Popen(SERVICE_COMMAND)
			time.sleep(3)
			self.client = IconClient(self, settings)
		self.client.start()
		self.client.send(MSG(MsgType.STATUS, None))
		self.mainloop.run()

	def build_menu(self):

		menu = Gtk.Menu()
		self.pause = Gtk.CheckMenuItem('Pause Expansion')
		self.pause.connect('toggled', self.toggle_pause)
		editor = Gtk.ImageMenuItem('Editor')
		icon_editor = Gtk.Image.new_from_icon_name('preferences-system', 22)
		editor.set_image(icon_editor)
		editor.connect('activate', self.toggle_editor)
		menu_quit = Gtk.ImageMenuItem('Quit')
		icon_quit = Gtk.Image.new_from_icon_name('application-exit', 22)
		menu_quit.set_image(icon_quit)
		menu_quit.connect('activate', self.close)
		about = Gtk.ImageMenuItem('About')
		icon_about = Gtk.Image.new_from_icon_name('help-about', 22)
		about.set_image(icon_about)
		about.connect('activate', self.show_about)
		menu.append(self.pause)
		menu.append(editor)
		menu.append(about)
		menu.append(menu_quit)
		menu.show_all()
		return menu

	def toggle_icon(self, active):

		if active:
			if self.settings.getbool('light_theme'):
				self.indicator.set_icon(ICON_ACTIVE_LIGHT)
			else:
				self.indicator.set_icon(ICON_ACTIVE)
		else:
			if self.settings.getbool('light_theme'):
				self.indicator.set_icon(ICON_PAUSED_LIGHT)
			else:
				self.indicator.set_icon(ICON_PAUSED)

	def set_status(self, status):

		self.status_set = False
		self.pause.set_active(status)
		self.toggle_icon(not status)
		self.status_set = True

	def toggle_pause(self, menu_item):

		if self.status_set:
			self.client.send(MSG(MsgType.PAUSE, None))

	def toggle_editor(self, menu_item):

		self.client.send(MSG(MsgType.EDITOR, None))

	def show_about(self, menu_item):

		dialog = AboutDialog()
		dialog.run()
		dialog.destroy()

	def close(self, menu_item):

		self.client.send(MSG(MsgType.EXIT, None))

	def reload_settings(self):

		if self.settings.getbool('light_theme'):
			if self.pause.get_active():
				self.indicator.set_icon(ICON_PAUSED_LIGHT)
			else:
				self.indicator.set_icon(ICON_ACTIVE_LIGHT)
		else:
			if self.pause.get_active():
				self.indicator.set_icon(ICON_PAUSED)
			else:
				self.indicator.set_icon(ICON_ACTIVE)


class TrayIcon(object):

	def __init__(self, settings):

		self.settings = settings
		self.tray = Gtk.StatusIcon.new_from_file(
			ICON_ACTIVE_LIGHT
				if self.settings.getbool('light_theme') else ICON_ACTIVE)
		self.tray.set_tooltip_text(NAME)
		self.tray.connect('popup-menu', self.show_menu)
		self.menu = Gtk.Menu()
		self.build_menu(self.menu)
		self.mainloop = GLib.MainLoop()
		self.status_set = False
		try:
			self.client = IconClient(self, settings)
		except ConnectionRefusedError:
			Popen(SERVICE_COMMAND)
			time.sleep(3)
			self.client = IconClient(self, settings)
		self.client.start()
		self.client.send(MSG(MsgType.STATUS, None))
		self.mainloop.run()

	def build_menu(self, menu):

		self.pause = Gtk.CheckMenuItem('Pause Expansion')
		self.pause.connect('toggled', self.toggle_pause)
		editor = Gtk.ImageMenuItem('Editor')
		icon_editor = Gtk.Image.new_from_icon_name('preferences-system', 22)
		editor.set_image(icon_editor)
		editor.connect('activate', self.toggle_editor)
		menu_quit = Gtk.ImageMenuItem('Quit')
		icon_quit = Gtk.Image.new_from_icon_name('application-exit', 22)
		menu_quit.set_image(icon_quit)
		menu_quit.connect('activate', self.close)
		about = Gtk.ImageMenuItem('About')
		icon_about = Gtk.Image.new_from_icon_name('help-about', 22)
		about.set_image(icon_about)
		about.connect('activate', self.show_about)
		menu.append(self.pause)
		menu.append(editor)
		menu.append(about)
		menu.append(menu_quit)
		menu.show_all()

	def show_menu(self, tray, button, activate_time):

		self.menu.popup(
			None, None,
			Gtk.StatusIcon.position_menu, self.tray,
			button, activate_time)

	def toggle_icon(self, active):

		if active:
			if self.settings.getbool('light_theme'):
				self.tray.set_from_file(ICON_ACTIVE_LIGHT)
			else:
				self.tray.set_from_file(ICON_ACTIVE)
		else:
			if self.settings.getbool('light_theme'):
				self.tray.set_from_file(ICON_PAUSED_LIGHT)
			else:
				self.tray.set_from_file(ICON_PAUSED)

	def set_status(self, status):

		self.status_set = False
		self.pause.set_active(status)
		self.toggle_icon(not status)
		self.status_set = True

	def toggle_pause(self, menu_item):

		if self.status_set:
			self.client.send(MSG(MsgType.PAUSE, None))

	def toggle_editor(self, menu_item):

		self.client.send(MSG(MsgType.EDITOR, None))

	def show_about(self, menu_item):

		dialog = AboutDialog()
		dialog.run()
		dialog.destroy()

	def close(self, menu_item):

		self.client.send(MSG(MsgType.EXIT, None))

	def reload_settings(self):

		if self.settings.getbool('light_theme'):
			if self.pause.get_active():
				self.tray.set_from_file(ICON_PAUSED_LIGHT)
			else:
				self.tray.set_from_file(ICON_ACTIVE_LIGHT)
		else:
			if self.pause.get_active():
				self.tray.set_from_file(ICON_PAUSED)
			else:
				self.tray.set_from_file(ICON_ACTIVE)


settings = Settings()
if INDICATOR:
	Indicator(settings)
else:
	TrayIcon(settings)
